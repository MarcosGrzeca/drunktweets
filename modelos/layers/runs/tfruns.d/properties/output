
> library(keras)

> library(caret)

> library(tools)

> source(file_path_as_absolute("utils/functions.R"))

> load("rdas/sequences.RData")

> epochs <- 4

> embedding_dims <- 100

> filters <- 200

> kernel_size <- 10

> hidden_dims <- 200

> main_input <- layer_input(shape = c(maxlen), dtype = "int32")

> ccn_out <- main_input %>% layer_embedding(vocab_size, 
+     embedding_dims, input_length = maxlen) %>% layer_dropout(0.2) %>% 
+     layer_conv_1d( .... [TRUNCATED] 

> auxiliary_input <- layer_input(shape = c(max_sequence))

> entities_out <- auxiliary_input %>% layer_dense(units = 64, 
+     activation = "relu")

> auxiliary_input_types <- layer_input(shape = c(max_sequence_types))

> types_out <- auxiliary_input_types %>% layer_dense(units = 64, 
+     activation = "relu")

> main_output <- layer_minimum(c(ccn_out, entities_out, 
+     types_out)) %>% layer_dense(units = 64, activation = "relu") %>% 
+     layer_dense(uni .... [TRUNCATED] 

> model <- keras_model(inputs = c(main_input, auxiliary_input, 
+     auxiliary_input_types), outputs = main_output)

> model %>% compile(loss = "binary_crossentropy", optimizer = "adam", 
+     metrics = "accuracy")

> callbacks = list(callback_tensorboard(log_dir = "tensorruns/c", 
+     histogram_freq = 1, embeddings_freq = 1))

> history <- model %>% fit(x = list(train_vec$new_textParser, 
+     sequences, sequences_types), y = array(dados_train$resposta), 
+     batch_size = .... [TRUNCATED] 

> history
Trained on 16,803 samples, validated on 4,201 samples (batch_size=128, epochs=4)
Final epoch (plot to see history):
     acc: 0.8036
    loss: 0.4239
 val_acc: 0.8726
val_loss: 0.2598 

> predictions <- model %>% predict(list(test_vec$new_textParser, 
+     sequences_test, sequences_test_types))

> predictions2 <- round(predictions, 0)

> matriz <- confusionMatrix(data = as.factor(predictions2), 
+     as.factor(dados_test$resposta), positive = "1")

> matriz
Confusion Matrix and Statistics

          Reference
Prediction    0    1
         0 3090  441
         1  605 1115
                                          
               Accuracy : 0.8008          
                 95% CI : (0.7897, 0.8115)
    No Information Rate : 0.7037          
    P-Value [Acc > NIR] : < 2.2e-16       
                                          
                  Kappa : 0.5365          
 Mcnemar's Test P-Value : 4.658e-07       
                                          
            Sensitivity : 0.7166          
            Specificity : 0.8363          
         Pos Pred Value : 0.6483          
         Neg Pred Value : 0.8751          
             Prevalence : 0.2963          
         Detection Rate : 0.2123          
   Detection Prevalence : 0.3276          
      Balanced Accuracy : 0.7764          
                                          
       'Positive' Class : 1               
                                          

> print(paste("F1 ", matriz$byClass["F1"] * 100, "Precisao ", 
+     matriz$byClass["Precision"] * 100, "Recall ", matriz$byClass["Recall"] * 
+       .... [TRUNCATED] 
[1] "F1  68.0708180708181 Precisao  64.8255813953488 Recall  71.6580976863753 Acuracia  80.0799847648067"

> adicionarResultadosTestes("Minimum", matriz$byClass["F1"] * 
+     100, matriz$byClass["Precision"] * 100, matriz$byClass["Recall"] * 
+     100)
